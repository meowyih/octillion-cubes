#ifndef MAZE_BITMAP_CREATOR_HEADER
#define MAZE_BITMAP_CREATOR_HEADER

#include <memory>
#include <vector>
#include <unordered_map>

#include "world/worldmap.hpp"
#include "3d/matrix.hpp"

#include "Cube3d.hpp"

class MazeBitmapCreator
{
public:
    const static int RENDER_FLAG_UNKNOWN = 0xFFFF;
    const static int RENDER_FLAG_PLAIN = 1;
    const static int RENDER_FLAG_ALL = 2;

public:
    // one map, one creator
    MazeBitmapCreator();
    
    void set(int w, int h, std::shared_ptr<octillion::WorldMap> map);
    
    // hdc is for text drawing
    std::shared_ptr<std::vector<BYTE>> render(
        octillion::CubePosition loc,
        Matrix<double> matrix, 
        int depth, int flag);

    // hdc is for text drawing
    std::shared_ptr<std::vector<BYTE>> render(
        octillion::CubePosition loc,
        Matrix<double> m1,
        Matrix<double> m2,
        Matrix<double> m3,
        int depth, int flag,
        HDC hdc);

    int width();
    int height();
    std::shared_ptr<Cube3d> cube(octillion::CubePosition pos);

public:
    // help function, travel all 'cubes' in the x-y plain or in x-y-z dimension
    // it is BFS and the center is 'loc', result stored in 'out'
    const static int TRAVERSAL_FLAG_PLAIN = 1;
    const static int TRAVERSAL_FLAG_ALL = 2;
    void traversal(
        int flag, int depth,
        octillion::CubePosition loc,
        std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>>& cubes,
        std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>>& out);

public:
    // screen width and height
    int w_, h_;
    int width_size_byte_;

    int last_render_flag_;
    int last_depth_;
    octillion::CubePosition last_pos_;
    Matrix<double> last_matrix_;

    // map data
    std::shared_ptr<octillion::WorldMap> map_;

    // byte array to store the bitmap
    std::shared_ptr<std::vector<BYTE>> buffer_;

    // all cubes
    std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>> cubes_;

    // all viewable cubes generated by traversal function
    std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>> cubes_viewable_;

    // viewable cubes in the same xy plain as 'loc' in render()
    std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>> cubes_same_;

    // cubes on the plains higher than 'loc' in render()
    std::vector< std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>>> cubes_upper_;

    // cubes on the plains lower than 'loc' in render()
    std::vector< std::unordered_map<octillion::CubePosition, std::shared_ptr<Cube3d>>> cubes_lower_;
};
#endif